import streamlit as st
import firebase_admin
from firebase_admin import credentials, firestore
import pandas as pd
from io import BytesIO
import json

st.set_page_config(page_title="Exportador Firestore a Excel")

st.title("Exportador Firestore a Excel")
st.markdown("Sube tu archivo JSON con credenciales")

# Cargar archivo JSON
json_file = st.file_uploader("Elige el archivo JSON", type="json")

project_id_input = st.text_input("Proyecto:", placeholder="ej. midatabase")
collection_name = st.text_input("Nombre de la colecciÃ³n", value="respuestas")

if json_file and project_id_input and collection_name:
    json_bytes = json_file.read()
    json_dict = json.loads(json_bytes)

    # ValidaciÃ³n del proyecto
    if json_dict.get("project_id") != project_id_input:
        st.error("El project_id del JSON no coincide con el ingresado.")
        st.stop()

    # Inicializar Firebase
    if not firebase_admin._apps:
        cred = credentials.Certificate(json_dict)
        firebase_admin.initialize_app(cred)

    db = firestore.client()

    # Obtener documentos de la colecciÃ³n
    docs = db.collection(collection_name).stream()
    data = [doc.to_dict() for doc in docs]

    if not data:
        st.warning("La colecciÃ³n estÃ¡ vacÃ­a.")
        st.stop()

    df = pd.DataFrame(data)

    # Renombrar columnas si es el proyecto especificado
    if project_id_input == "dondeestamicabezaserver":
        replacements = {
            "Â¿Si te pasa algo bueno, a quiÃ©n se lo cuentas primero?": "SiTePasaAlgoBuenoAQuienLeCuentasPrimero",
            "Â¿Con quÃ© frecuencia pides consejo cuando tienes un problema?": "FrecuenciaPedirConsejo",
            "Cuando me enfrento a los problemas tiendo a...": "CuandoMeEnfrentoALosProblemas",
            "Â¿Con quÃ© raza te identificas mÃ¡s?": "Raza",
            "Â¿QuÃ© te mantiene con vida en los dÃ­as difÃ­ciles?": "QueTeMantieneConVida",
            "Â¿Te has sentido activx y energicx Ãºltimamente?": "TeHazSentidoActivxYEnergicx",
            "Â¿DÃ³nde vives?": "Donde_Vives",
            "Â¿Y si te pasa algo malo, a quiÃ©n se lo cuentas primero?": "YSiTePasaAlgoMalo",
            "Â¿Con quÃ© te diviertes Ãºltimamente?": "ConQueTeDiviertes",
            "DespuÃ©s de la tormenta me siento...": "DespuesDeLaTormentaMeSiento",
            "Â¿Te has despertado frescx y descansadx Ãºltimamente?": "TeHazDespertadoFrescxYDescansadx",
            "Â¿CÃ³mo te imaginas en 10 aÃ±os?": "TuEn10AÃ±os",
            "Cuando veo a alguien con problemas tiendo a...": "CuandoVeoAlguienEnProblemas",
            "Â¿QuÃ© caracterÃ­sticas tendrÃ­a un pana influencer que sigas?": "PanaInfluencer",
            "Â¿QuÃ© gÃ©nero(s) consumes mÃ¡s?": "Generos",
            "Â¿QuÃ© te gustarÃ­a hacer si el dinero no fuera un problema?": "QueTeGustariaHacer",
            "Â¿Te has sentido tranquilx y relajadx Ãºltimamente?": "TeHazSentidoTranquilxYRelajadx",
            "Â¿Con quÃ© frecuencia logras tus objetivos personales?": "FrecuenciaLograrObjetivos",
            "Â¿QuÃ© estÃ¡s haciendo actualmente (trabajo, estudio, etc.)?": "ActividadActual",
            "Â¿Te adaptas con facilidad a los cambios?": "TeAdaptadasALosCambios",
            "Â¿Te has sentido alegre y de buen humor Ãºltimamente?": "TeHazSentidoAlegreYDeBuenHumor",
            "Â¿QuÃ© cualidades debe tener un influencer que sigas?": "CualidadesDelInfluencer",
            "Â¿QuÃ© edad tienes?": "Edad",
            "Â¿QuÃ© es lo peor de tu trabajo o estudios actualmente?": "QueEsLoPeorDeTuTrabajoOEstudio",
            "Mi vida cotidiana ha estado llena de cosas que me interesen": "TuVidaCotiadianaHaEstadoLlenaDeCosasQueMeInteresen",
            "Cuando estÃ¡s discutiendo con alguien sueles...": "CuandoEstasDiscutiendo",
            "Â¿DÃ³nde te sientes mejor?": "DondeTeSientesMejor"
        }

        df.rename(columns=replacements, inplace=True)
        if "id" in df.columns:
            del df["id"]

    st.success("Datos cargados correctamente. Vista previa:")
    st.dataframe(df.head())

    # Descargar como Excel
    output = BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="respuestas")

    st.download_button(
        label="ðŸ“¥ Descargar Excel",
        data=output.getvalue(),
        file_name="respuestas_exportadas.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
